#Compile this program using asm. ./asm -i program.asm -o program.bin
section 0
fill 0xFFFF,0

section 0xF000
!hello world!!! You should see this print.
bytes 0xA, 0xA;
!Another string.
bytes 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA
bytes 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA
bytes 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA
bytes 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA
bytes 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA
bytes 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA
bytes 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xA

section 0
#loop control
lda %0x1e8%
lb 1
sc %0%
add
#using split syntax
sta %0x1e8%
#grab our character from our array of characters
llb %1%;sub;sub;
llb %0xF000%
add
illdaa;
llb %255%;and;
putchar



#perform the loop check
lda 1,0xe8
lb 0x41
cmp;lb 0;cmp;jmpifeq


#Load the value at 1e8 into register A
#Using non-split syntax
lda 1,0xe8
#Print it
putchar
#Halt execution
#alternatively, halt by dividing by zero
#la 1
#lb 0
#mod
halt
