

//RXSQRRT
//finds the sqrt of the number passed in RX0.
//rx2: the number we're trying to find the square root of.
//rx3: the current number we're trying.
//Only unsigned numbers!

..decl_farproc(LIBC_REGION):proc_rxsqrt
..export"proc_rxsqrt"
	rx2_0;
	lb0; rx3b;
	libc_sqrt_loop:
		rx0_3;rx1_3;rxmul;
		rx1_2;
		rxcmp;
		sc %libc_sqrt_iseq%; jmpifeq; //Is it exactly equal? 
		lb 2; cmp;
		sc %libc_sqrt_other_end%; jmpifeq;
		rx0_3;rxincr;rx3_0;
		sc %libc_sqrt_loop%; jmp;
	libc_sqrt_iseq:
		rx0_3;
		farret
	libc_sqrt_other_end:
		rx0_3; rxdecr;
		farret;

//Find absolute value of value in RX0;
//Quashes RX1 and RX0
//Return value in RX0
..decl_farproc(LIBC_REGION):proc_rxabs
..export"proc_rxabs"
	la 0; rx1a;
	rxicmp;lb 0; cmp;
	sc %libc_rxabs_end%; jmpifneq;
	rxcompl; rxincr; //invert the number.
	//Check if it's still negative.
	rxicmp;lb 0; cmp;
	sc %libc_rxabs_end%; jmpifneq;
	rxdecr; //It was the special value! make it positive
	libc_rxabs_end:
		farret;
