

//the first available page in memory.
//note that 0x200 is the first page of the libc, 0x2FF is the last page of the libc
//This defaults to giving the user about 2 megs of space for code
//all the user has to do is modify this before calling alloc for the first time.


:libc_alloc_start_page:
bytes %/0x2000%;

//the last available page in memory.
//It can be allocated!
:libc_alloc_last_page:
bytes %/0xFFFF%;


..export"libc_alloc_start_page"
..export"libc_alloc_last_page"

.libc_ld_start_page: farldrx0 %~LIBC_REGION%, %libc_alloc_start_page%;
.libc_st_start_page: farstrx0 %~LIBC_REGION%, %libc_alloc_start_page%;
.libc_ld_last_page: farldrx0 %~LIBC_REGION%, %libc_alloc_last_page%;
.libc_st_last_page: farstrx0 %~LIBC_REGION%, %libc_alloc_last_page%;
..export"libc_ld_start_page"
..export"libc_st_start_page"
..export"libc_ld_last_page"
..export"libc_st_last_page"


//From the (relative) page number in RX0, load page bits into the "A" register.
//the exact byte is RX0/4, which must be added to the alloc_page_map address.
//the 2 bits to select are determined by the last 2 bits of the page number.
//this macro clobbers RX0, RX1, and A,B, and C.

.libc_ld_page_bits: 	rx0push;										\
	lb 2; rx1b; rxrsh; 													\
	lrx1 0,%~LIBC_REGION%, %libc_alloc_page_map%; rxadd;	cbrx0;		\
	farilda; ca;														\
	rx0pop;																\
	arx0;lb3;and;lb2;mul;ba;ac;rsh;lb3;and; 
	//^This is what actually extracts the loaded bits.

//This one is more complicated. A holds the bits loaded from ld_page_bits, or set by hand.
//Now, we want to *write* to the page table, indicated by RX0.
//The address of the computed byte is stored this time in RX1 (that's the rx1_0 insn.)
//We stash away the loaded byte after farilda-ing it into register .
//we restore RX0.
//We then compute the correct shift the same way we did with ld_page_bits,
//We modify our requested set of bits
//We then modify the bit pattern of the byte using a mask, we AND it to zero.
//Finally, we 'or' in the a value.
//Then we stash away our completed byte!

.libc_st_page_bits:		apush; rx0push;										\
	lb 2; rx1b; rxrsh; 														\
	lrx1 0,%~LIBC_REGION%, %libc_alloc_page_map%; rxadd;rx1_0;cbrx0;		\
	farilda; ca;															\
	rx0pop;																	\
	arx0;lb3;and;lb2;mul;ba;												\
	apop;lsh;apush;															\
	la3;lsh;compl;															\
	bc;and;ba;apop;or;														\
	rx0_1;cbrx0;farista;													\
	

//ALLOC~~~~~~~~~~~~~~~~~~~~~~~
//Clobbers: [all]
//Only argument: in RX0, the number of contiguous bytes needed.
//the return value is also in RX0.
//the return value is 0 if a suitable area of memory could not be found.
//the return value is otherwise a pointer to the first page of the allocated memory.
..decl_farproc(LIBC_REGION):proc_alloc
..export"proc_alloc"
	//How many pages do we need? adding 255 is the classic round-up
	lb 0xff; rx1b; rxadd;
	lb 8; rx1b; rxrsh;
	//Push it onto the stack.
	rx0push;
	//Linearly search the page map. First, initialize loop variables
	lrx2 %/0%; //The page we are investigating.
	lrx3 %/0%; //The number of free pages.
	libc_alloc_search_looptop:
		//First we need to know if we have reached past the end of the page map.
		
		rx0_2;
		farldrx1 %~LIBC_REGION%, %libc_alloc_last_page%;
		rxcmp;
		lb2;
		cmp;
		sc %libc_alloc_loopend_failure%; jmpifeq;		//If we have gone past the last page, die.
		libc_ld_page_bits;//Grab those page bits!
		
		nota;sc %libc_alloc_found_free_page%; jmpifeq;

		//FAILURE!
		rx0_2;rxincr;rx2_0;
		lb0;rx3b;
		sc %libc_alloc_search_looptop%; jmp;
	libc_alloc_found_free_page:
		rx0_2;rxincr;rx2_0;
		rx0_3;rxincr;rx3_0;
		//we should now check if that is enough pages.
		rx1pop;
		rxcmp; 
		sc %libc_alloc_loopend_success%; jmpifeq;
		rx1push;
		sc %libc_alloc_search_looptop%; jmp;
	libc_alloc_loopend_success:
		rx0_2;
		rx1_3;
		rxsub;
		rx2_0;
		rx0push;
		//we must must mark all the pages as used, starting with the first one.
		//la '\r';putchar;la '\n';putchar;
		la 3;
		libc_st_page_bits;
		rx0_2;rxincr;rx2_0;
		rx0_3;rxdecr;rx3_0;
		lb0;rx1b;rxcmp;sc %libc_alloc_final%; jmpifeq;		//only needed a single page!
		libc_alloc_mark_used_looptop:
			rx0_2;la 1;
			libc_st_page_bits;
			rx0_2;rxincr;rx2_0;
			rx0_3;rxdecr;rx3_0;
			lb0;rx1b;rxcmp;sc %libc_alloc_final%; jmpifeq;
			sc %libc_alloc_mark_used_looptop%; jmp;
		libc_alloc_final:
		rx0pop;
		lb 8; rx1b; rxlsh;
		rx0push;
		farldrx0 %~LIBC_REGION%, %libc_alloc_start_page%;
		rxlsh;
		rx1pop;
		rxadd;
		farret
	libc_alloc_loopend_failure:
		pop %4%;
		lb0;rx0b;
farret

//FREE~~~~~~~~~~~~~~~~~~~~~
//Clobbers: [all]
//Mark an allocation as free'd
//RX0: start address to begin free-ing.
//return value: 1 in a if the operation succeeded,
//0 in a if it failed.
..decl_farproc(LIBC_REGION):proc_free
..export"proc_free"
	//modify the argument to page indexing.
		lb8;rx1b;rxrsh;
		rx2_0;
	//bad page numbers. Greater than the end, or less than the beginning? Can't!
		farldrx1 %~LIBC_REGION%, %libc_alloc_last_page%;
		rxcmp;lb2;cmp;sc %libc_free_fail%; jmpifeq;

		farldrx1 %~LIBC_REGION%, %libc_alloc_start_page%;
		rxcmp;nota;sc %libc_free_fail%; jmpifeq;

	//set up our loop variable.
		rx0_2;
		farldrx1 %~LIBC_REGION%, %libc_alloc_start_page%;
		rxsub;
		rx2_0;
	//First, we check to make sure that the bits are indeed set to 3.
		libc_ld_page_bits;
		lb 3; cmp; sc %libc_free_fail%; jmpifneq;
		rx0_2;
		la0;
		libc_st_page_bits;
		rx0_2;rxincr;rx2_0;
	//Now, the loop!
		libc_setter_looptop:
			rx0_2;
			libc_ld_page_bits;
			lb 1; cmp; sc %libc_free_success%; jmpifneq;
			rx0_2;
			la 0;
			libc_st_page_bits;
			rx0_2;rxincr;rx2_0;
			sc %libc_setter_looptop%; jmp;
	libc_free_fail:
		la 0;
		farret

	libc_free_success:
		la 1;
		farret



//For every page, we keep 2 bits to indicate...
//1) is it allocated?
//2) is it the start of an allocation?
//they are bit 1 and 2 respectively.

//See libc.hasm
