//ATOU_DEC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Argument is in RX0, and is returned in RX0.
//Clobbers: A,B,C,RX0,RX1,RX2,RX3
//Read a base ten integer from a string.
//Note that whitespace is *not* skipped
..decl_farproc:proc_atou_dec
	//the passed string is in RX0.
	rx3_0;
	lb 0; rx2b;					//happens to be a very fast way of transferring zero into a register.
	:libc_atou_dec_looptop:
		rx0_3; 
		cbrx0; 
		farilda;
		apush; lb 0x30; cmp; lb 0; cmp; bpop; sc %libc_atou_dec_loopout%; jmpifeq;			//Jump if the character was less than 0x30.
		ab; apush; lb 0x39; cmp; lb 2; cmp; bpop; sc %libc_atou_dec_loopout%; jmpifeq;		//Jump if the character was greater than 0x39.
		ab; lb 0x30; sub;
		rxincr;
		rx3_0;
		//the value is in A.
		rx0_2			//load the value.
		lb 10
		rx1b
		rxmul
		rx1a
		rxadd
		rx2_0			//stash it away!
		sc %libc_atou_dec_looptop%; jmp;
	:libc_atou_dec_loopout:
	rx0_2;
farret;

//ATOI_DEC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Argument is in RX0, and is returned in RX0.
//Clobbers: A,B,C,RX0,RX1,RX2,RX3
//Read a base ten integer from a string.
//Note that whitespace is *not* skipped


..decl_farproc:proc_atoi_dec
	//the passed string is in RX0.
		rx3_0;
		lb 0; rx2b;
	//before anything else, we need to test if the first character is NULL.
	//Notice we are using the previous function's return as our return. This is a code de-duplication.
		cbrx0; farilda; lb 0; cmp; sc %libc_atou_dec_loopout%; jmpifeq;
	//Now, we test for the presence of + and - and use those to push
		cbrx0; farilda; lb 45; cmp; sc %libc_atoi_dec_minus%; jmpifeq;
		cbrx0; farilda; lb 43; cmp; sc %libc_atoi_dec_plus%; jmpifeq;
		la 0; apush;
		sc %libc_atoi_dec_looptop%; jmp;
	:libc_atoi_dec_plus:
		la 0; apush;
		rx0_3; rxincr; rx3_0;
		sc %libc_atoi_dec_looptop%; jmp;
	:libc_atoi_dec_minus:
		la 1; apush;
		rx0_3; rxincr; rx3_0;
	:libc_atoi_dec_looptop:
		rx0_3; 
		cbrx0; 
		farilda;
		apush; lb 0x30; cmp; lb 0; cmp; bpop; sc %libc_atoi_dec_loopout%; jmpifeq;			//Jump if the character was less than 0x30.
		ab; apush; lb 0x39; cmp; lb 2; cmp; bpop; sc %libc_atoi_dec_loopout%; jmpifeq;		//Jump if the character was greater than 0x39.
		ab; lb 0x30; sub;
		rxincr;
		rx3_0;
		//the value is in A.
		rx0_2			//load the value.
		lb 10
		rx1b
		rxmul
		rx1a
		rxadd
		rx2_0			//stash it away!
		sc %libc_atoi_dec_looptop%; jmp;
	:libc_atoi_dec_loopout:
		rx0_2
		apop
		sc %libc_atoi_dec_handle_minus%; jmpifeq;
		farret;
	:libc_atoi_dec_handle_minus:
		rx0_2
		rxcompl
		rxincr
		farret
