
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~ P R I V I L E G E D C O D E ~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//This file contains code that is meant to be executed at the privileged level. I.E. you would boot
//the system into this.

//User-mode code should be exec'd by a privileged kernel such as KRENEL.

//These four nops are very important.
nop;nop;nop;nop;
ldrx0 %libc_krenel_stack_data_store%; //HUGE NOTE: upon a boot of the libc, this will load zeroes.
farstrx0 %&0%
.libc_krenel_jumploc:@+1+
lrx0 %/libc_booter%;
farjmprx0;
:libc_krenel_stack_data_store:
nop;nop;nop;nop;

//krenel constants:
//MUST BE A POWER OF TWO, must be identical to the constant in isa_pre.h SISA_MAX_TASKS
.libc_krenel_max_active_tasks:16
//Must be one less than that power of two, for an "and" mask:
.libc_krenel_max_active_tasks_mask:15
//Maximum number of times a syscall or interrupt can be made before a context switch occurs.
.libc_krenel_max_returns:100
//the region where code to execute is stored.
.libc_krenel_exec_region:1



//Maximum amount of disk allowed to be used.
.libc_krenel_max_disk_usage:0x400000
.libc_krenel_max_disk_mask: 0x3fffff


//Reserved page for disk IO.
.libc_krenel_diskio_page:0xFF00
.libc_krenel_diskio_next_page:0xFF01

//We reserve 2 megabytes for creating a PID0 program.
//The rest of the disk can be written to and read from, by any program.

.libc_krenel_disk_reserved:0x2000


..include"printbytehex.hasm"
..include"fdisk.hasm"
..include"puts.hasm"
..include"strlen.hasm"
..include"memcpy.hasm"
..include"gets.hasm"
..include"atoi_dec.hasm"
..include"atof_dec.hasm"
..include"sqrt.hasm"
..include"wait.hasm"
..include"termcontrol.hasm"
..include"alloc.hasm"
..include"strutil.hasm"

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~K R E N E L~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Give it a location to boot as PID 0, and it will, in RX0.

..decl_lproc:libc_lproc_krenel_print_krenel
	la '\r'; putchar;
	la '\n'; putchar;
	la 'K'; putchar;
	la 'R'; putchar;
	la 'E'; putchar;
	la 'N'; putchar;
	la 'E'; putchar;
	la 'L'; putchar;
	la '\:'; putchar;
	la '\ '; putchar;
	ret






//Given a file size in RX0, find a start page. If none can be found, return 0xffFFffFF, which is erroneous.
..decl_lproc:libc_lproc_krenel_find_free
	//TODO
	lrx0 %/0xffFFffFF%;
	ret;

//Load user page according to register B.
..decl_lproc:libc_lproc_krenel_load_user_page
	user_getb;ca;
	lla %libc_krenel_diskio_page%;
	user_farpagel;
	ret

//all tasks start out as 0- inactive.
//these are shorts. That's why we do two fills
:libc_krenel_task_isactive_array:
fill libc_krenel_max_active_tasks, 0;
fill libc_krenel_max_active_tasks, 0;


:libc_krenel_task_nreturns:
bytes 0,0;

:libc_krenel_active_task_index:
bytes 0,0;


//TODO: implement some sort of BRK implementation
//PID 0 owns the entire segment to begin with.
:libc_krenel_owns_segment_index:
bytes 0,0;

:libc_krenel_segment_lock:
bytes 0,1;

..decl_lproc:libc_lproc_krenel_configure_segment
		llda %libc_krenel_active_task_index%
		lldb %libc_krenel_owns_segment_index%
		cmp;
		sc %libc_krenel_configure_segment_make_own_segment%; jmpifeq;
			//we don't own it! The mask and offset should be configured to prevent any form of segment access, it should always generate an error.
			//Offset=pages is a magic value for preventing segment access.
			//TODO: Provide users with access to the segment. Divy up the segment.
			lb 0; 
			rx1b
			seg_pages
			seg_config;
			ret;
		libc_krenel_configure_segment_make_own_segment:
			//we do own it!
			seg_pages; rxdecr; rx1_0;	//mask of 1 less than seg_pages- meaning the entire segment is accessible
			lb 0; rx0b;					//offset of 0
			seg_config;
			ret;


..decl_farproc(LIBC_REGION):proc_krenel
..export"proc_krenel"
:LIBC_KRENEL_BEGIN:
..export"LIBC_KRENEL_BEGIN"
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~ KRENEL STARTUP ROUTINE ~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//We are passed a place to jump to in RX0. Store it away while we set up the krenel.
		rx0push;
	//Set input mode to be non-blocking.
		lla %0xE000%; interrupt;
	//Set the active task's info.
		la 0; stla  %libc_krenel_task_nreturns%;	
		la 0; stla  %libc_krenel_active_task_index%;
		la 0; stla  %libc_krenel_owns_segment_index%;
		la 1; stla  %libc_krenel_segment_lock%;
	//Set all tasks to be zero
		lb0;rx0b; 
		lb libc_krenel_max_active_tasks; rx1b;
		libc_krenel_zero_tasks_looptop:
			arx0;task_set; task_kill;
			arx0;
			lb 2;mul;ba;
			sc %LIBC_REGION%;lla %libc_krenel_task_isactive_array%
			add;ba;
			la 0; faristla;
			rxincr;rxcmp;nota; //nota is just "Is a equal to zero?"
			sc %libc_krenel_zero_tasks_looptop%; jmpifeq;
	//PID 0 is the initial program... make it 1.
		sc %LIBC_REGION%;llb %libc_krenel_task_isactive_array%
		la 1;
		stla   %libc_krenel_task_isactive_array%;
		la 0; task_set;
	//get that important argument back!
		rx0pop;
		farstrx0 %~LIBC_REGION%, %libc_krenel_jumploc%;
	//We must copy three bytes, so we do 4 for speed's sake.
		farldrx0 %&0%
		farstrx0 %~LIBC_REGION%, %libc_krenel_stack_data_store%

		//Has to be FIXED for the new sta
		lb 0; cb; la 2; farista; //code for "la"
		lb 1; la %~LIBC_REGION%; farista; //load libc's region into a.
		lb 2; la 0x44; farista; //0x44 is lfarpc.

		push %10%; libc_lproc_krenel_configure_segment; pop %10%;
		
		emulate;
	//restore stack integrity.
		ldrx0 %libc_krenel_stack_data_store%
		farstrx0 %&0%
	//a holds the return value. CHECK IT.
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~ KRENEL SCHEDULER ROUTINE ~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	libc_krenel_cswitch_looptop:
		alpush; 
		lb 0xff; cmp; blpop; sc %libc_krenel_try_select_task%; jmpifeq;
		ab; alpush;
		lb 19; cmp; blpop; sc %libc_krenel_syscall%; jmpifeq;
		ab; alpush;
		lb 18; cmp; blpop; sc %libc_krenel_tried_interrupt%; jmpifeq;
		ab; alpush;
		lb 17; cmp; blpop; sc %libc_krenel_putchar%; jmpifeq;
		ab; alpush;
		lb 16; cmp; blpop; sc %libc_krenel_getchar%; jmpifeq;
		ab; alpush;
		lb 0; cmp; blpop; sc %libc_krenel_cswitch_killtask%; jmpifeq;
		la '\r'; putchar; la '\n'; putchar;
		libc_lproc_krenel_print_krenel;
		la 'e'; putchar;
		la 'x'; putchar;
		la 'i'; putchar;
		la 't'; putchar;
		la '\ '; putchar;
		la 'e'; putchar;
		la 'r'; putchar;
		la 'r'; putchar;
		la '\ '; putchar;
		bpush;proc_printbytehex;bpop;
		la '\r'; putchar; la '\n'; putchar;interrupt;
		sc %libc_krenel_cswitch_killtask%; jmp;
	libc_krenel_syscall:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~ KRENEL SYSCALL IMPLEMENTATIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			user_geta;	lb 0xa; cmp; sc %libc_krenel_syscall_flush_stdout%; jmpifeq;
			user_geta;	lb 0xc; cmp; sc %libc_krenel_syscall_clear_term%; jmpifeq;
			user_geta;	lb 0xd; cmp; sc %libc_krenel_syscall_flush_stdout%; jmpifeq;
			user_geta;	nota; sc %libc_krenel_syscall_flush_stdout%; jmpifeq;
			user_geta;	sc %libc_krenel_syscall_pumpevents%; jmpifeq; 						//Already 1!
			user_geta;	llb %0xDEAD%; cmp; sc %libc_krenel_shutdown%; jmpifeq;
			user_geta;	llb %0xDE00%; cmp; sc %libc_krenel_syscall_kill_pid%; jmpifeq;
			user_geta;	llb %0xDE01%; cmp; sc %libc_krenel_syscall_disk_write%; jmpifeq;
			user_geta;	llb %0xDE02%; cmp; sc %libc_krenel_try_select_task%; jmpifeq;		//Sleep.
			user_geta;	llb %0xDE03%; cmp; sc %libc_krenel_syscall_disk_read%; jmpifeq;
			user_geta;	llb %0xDE04%; cmp; sc %libc_krenel_syscall_exec%; jmpifeq;
			user_geta;	llb %0xDE05%; cmp; sc %libc_krenel_syscall_ipc_write%; jmpifeq;
			user_geta;	llb %0xDE06%; cmp; sc %libc_krenel_syscall_fork%; jmpifeq;
			user_geta;	llb %0xDE07%; cmp; sc %libc_krenel_syscall_getpid%; jmpifeq;
			user_geta;	llb %0xDE08%; cmp; sc %libc_krenel_syscall_ownsegment%; jmpifeq;
			user_geta;	llb %0xDE09%; cmp; sc %libc_krenel_syscall_releasesegment%; jmpifeq;
			//I don't recognize this syscall. 
			libc_lproc_krenel_print_krenel;
			la 'b'; putchar;
			la 'a'; putchar;
			la 'd'; putchar;
			la '\ '; putchar;
			la 's'; putchar;
			la 'y'; putchar;
			la 's'; putchar;
			la 'c'; putchar;
			la 'a'; putchar;
			la 'l'; putchar;
			la 'l'; putchar;
			la '\r'; putchar;
			la '\n'; putchar;interrupt;
			sc %libc_krenel_cswitch_killtask%; jmp;
		:libc_krenel_syscall_getpid:
			llda %libc_krenel_active_task_index%;
			user_seta;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_ipc_write:
			user_get0; //The location in memory to write it.
			cbrx0;
			user_getb;apush; //the byte you want to write.
			user_getc; //the machine they want to interact with.
			task_set;
			apop;
			user_farista;	//write it!
			//Re-set our active task.
			llda %libc_krenel_active_task_index%;
			task_set;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_kill_pid:
			//did the user ask us to kill them?
			user_getb;
			lb libc_krenel_max_active_tasks_mask; 
			and;
			apush;
			lldb %libc_krenel_active_task_index%;
			cmp; bpop; sc %libc_krenel_cswitch_killtask%; jmpifeq;

			ab;apush;
			lb 2;mul;ba;sc %LIBC_REGION%;lla %libc_krenel_task_isactive_array%;
			add;ba;
			la 0; faristla;
			
			//also set it as killed in the CPU.
			apop;task_set; task_kill;

			//Re-set our active task.
			llda %libc_krenel_active_task_index%;
			task_set;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_flush_stdout:
			la '\n'; interrupt; //This also displays the screen.
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_clear_term:
			la 0xc; interrupt;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_pumpevents:
			la 1; interrupt;
			llb %0xffFF%; cmp; sc %libc_krenel_shutdown%; jmpifeq; //handle quit.
			user_seta;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_releasesegment:
			//Do we already own the segment? If not, then, don't unlock it.
			llda %libc_krenel_active_task_index%;
			lldb %libc_krenel_owns_segment_index%;
			cmp;
			sc %libc_krenel_syscall_ret0_failure%; 
			jmpifneq;
			//We own the segment. Unlock it.
			la 0; stla  %libc_krenel_segment_lock%;
			la 1; user_seta;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_ownsegment:
			//Do we already own the segment? If so, lock it.
			llda %libc_krenel_active_task_index%;
			lldb %libc_krenel_owns_segment_index%;
			cmp;
			sc %libc_krenel_syscall_ownsegment_already_own_pleaselock%; jmpifeq;
			
			//is the segment locked?
			llda %libc_krenel_segment_lock%;
			lb 1; cmp;
			sc %libc_krenel_syscall_ret0_failure%; jmpifeq;

			//We can own the segment!
			llda %libc_krenel_active_task_index%;
			stla  %libc_krenel_owns_segment_index%;
			libc_lproc_krenel_configure_segment;
		:libc_krenel_syscall_ownsegment_already_own_pleaselock:
			la 1; stla  %libc_krenel_segment_lock%;
			la 1; user_seta; //success!
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_ret0_failure:
			la 0; 
			user_seta;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_disk_write:
			//Write a single sector to disk.
			//RX0: Destination on disk. Not aligned!
			//B: source page.
			//Check permissions.
			user_get0; lrx1 %/libc_krenel_max_disk_mask%; rxand;
			lrx1 %/libc_krenel_disk_reserved%;
			rxcmp;
			lb 2;cmp; sc %libc_krenel_bad_disk_write%; jmpifneq; 
			//Load user page
			libc_lproc_krenel_load_user_page;
			user_get0;
			llb %libc_krenel_diskio_page%; 
			lla %0xFF11%; //Syscall to write 256 bytes to disk.
			interrupt;
			user_seta; //Inform the user if the disk write succeeded.
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_bad_disk_write:
			//print an error message.
			libc_lproc_krenel_print_krenel;
			la 'b'; putchar;
			la 'a'; putchar;
			la 'd'; putchar;
			la ' '; putchar;
			la 'd'; putchar;
			la 'i'; putchar;
			la 's'; putchar;
			la 'k'; putchar;
			la ' '; putchar;
			la 'w'; putchar;
			la 'r'; putchar;
			la 'i'; putchar;
			la 't'; putchar;
			la 'e'; putchar;
			la '\r'; putchar;
			la '\n'; putchar;interrupt;
			sc %libc_krenel_cswitch_killtask%; jmp;
		:libc_krenel_syscall_disk_read:
			//read a single sector from disk.
			//RX0: source sector in disk. Not aligned!
			//B: destination memory page in user memory.
			user_get0; lrx1 %/libc_krenel_max_disk_mask%; rxand;
			llb %libc_krenel_diskio_page%;
			lla %0xFF10%; //Disk Read magic number.
			interrupt;
			user_seta; //Inform the user if the disk read succeeded.
			//We now have to actually *copy* that stuff over to user memory.
			user_getb; ca;
			lla %libc_krenel_diskio_page%;
			user_farpagest;
			sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_exec:
			user_getb;			//The region;
			lb 8; lsh;			//times 256.
			rx0a;				//put it in RX0.
			rx3_0; 
			lrx1 %/0x100%;rxadd;
			rx1_0;
			rx0_3;

			//Copy memory by page.
			libc_krenel_syscall_exec_copymem_looptop:
				arx0;
				lb 255; and;
				llb libc_krenel_exec_region,0;		//Copied to the exec region.
				add;
				crx0;		//Destination page.
				user_farpagel; //USER farpagel
				rxincr;rxcmp;nota; //if(++rx0 < rx1)
				sc %libc_krenel_syscall_exec_copymem_looptop%; jmpifeq; //continue looping.

			//The memory is copied. We must now find a free PID.
			lrx1 %/libc_krenel_max_active_tasks%; lb 0; rx0b;
			libc_krenel_syscall_exec_findfreepid_looptop:
				arx0;
				lb 2;mul;ba
				lla %libc_krenel_task_isactive_array%;
				add;ba;
				illdab; //MARKED
				nota;
				sc %libc_krenel_syscall_exec_found_that_pid%; jmpifeq;
				rxincr;rxcmp;
				sc %libc_krenel_syscall_exec_failure%; jmpifeq;
				sc %libc_krenel_syscall_exec_findfreepid_looptop%; jmp;
			
			libc_krenel_syscall_exec_found_that_pid:
				//First, tell our previous user that we succeeded.
				la 1;user_seta;
				la 0; stla  %libc_krenel_task_nreturns%;	//Reset the number of returns for our old task.
				//It is in RX0.
				arx0;task_set;
				stla  %libc_krenel_active_task_index%;

				//Mark it as running.
				lb 2; mul; ba;
				sc %LIBC_REGION%;
				lla %libc_krenel_task_isactive_array%;
				add;ba;
				la 1; faristla;

				//Create a bootloader
				lb 0; cb; la 2; farista; //code for "la"
				lb 1; la %~libc_krenel_exec_region%; farista; //the new process boots directly into the exec region.
				lb 2; la 0x44; farista; //0x44 is lfarpc
				push %10%; libc_lproc_krenel_configure_segment; pop %10%;
				emulate; //This copies the entire address space of the kernel into the new process.
			//restore stack integrity.
				
				ldrx0 %libc_krenel_stack_data_store%
				farstrx0 %&0%
				//We have switched task, as commanded. A holds our return value. CHECK IT...
				alpush;
				alpop;
				sc %libc_krenel_cswitch_looptop%; jmp;
			libc_krenel_syscall_exec_failure:
				la 0;user_seta;
				sc %libc_krenel_syscall_end%; jmp;



				
		:libc_krenel_syscall_fork:
			//Find a free pid.
			lrx1 %/libc_krenel_max_active_tasks%; 
			lb 0; rx0b;
			libc_krenel_syscall_fork_findfreepid_looptop:
				arx0;
				lb 2;mul;ba
				//sc %LIBC_REGION%;
				lla %libc_krenel_task_isactive_array%;
				add;ba;
				illdab; //MARKED
				nota;
				sc %libc_krenel_syscall_fork_found_that_pid%; jmpifeq;
				rxincr;rxcmp;
				sc %libc_krenel_syscall_fork_failure%; jmpifeq;
				sc %libc_krenel_syscall_fork_findfreepid_looptop%; jmp;
			
			libc_krenel_syscall_fork_found_that_pid:
				//First, tell our previous user that we succeeded.
				la 1; user_seta;
				la 0; stla  %libc_krenel_task_nreturns%;	//Reset the number of returns.
				//The new PID is in RX0.
				arx0;apush;
				
				lb 0; rx0b;
				lrx1 %/0x10000%; //The end of memory, as a page.
				libc_krenel_syscall_fork_copymem_looptop:
					lla %libc_krenel_diskio_page%;;
					crx0;
					user_farpagel;
					apop;apush;task_set; //Into new user memory.
					lla %libc_krenel_diskio_page%;
					user_farpagest;
					llda %libc_krenel_active_task_index%;
					task_set;
					rxincr;rxcmp;nota;
					sc %libc_krenel_syscall_fork_copymem_looptop%; jmpifeq; //if(++rx0 < rx1) jmp

				apop; task_set; stla  %libc_krenel_active_task_index%;
				

				//Mark it as running.
				lb 2; mul; ba;
				sc %LIBC_REGION%;
				lla %libc_krenel_task_isactive_array%;
				add;ba;
				la 1; faristla;
				task_kill; //Reset it.
				//Unlike exec, we do not need to create a bootloader. Fork assumes that the userland code already did that.
				push %10%; libc_lproc_krenel_configure_segment; pop %10%;
				priv_drop;
				//We have switched task and returned, as commanded. A holds our return value. CHECK IT...
				sc %libc_krenel_cswitch_looptop%; jmp;
			libc_krenel_syscall_fork_failure:
				la 0;user_seta;
				sc %libc_krenel_syscall_end%; jmp;
		:libc_krenel_syscall_end:
			//Syscalls are expensive.
			llda %libc_krenel_task_nreturns%;
			lb 3; add;
			stla  %libc_krenel_task_nreturns%;
			sc %libc_krenel_preempt%; jmp;
	libc_krenel_getchar:
		getchar;user_seta;sc %libc_krenel_preempt%; jmp;
	libc_krenel_putchar:
		user_geta;putchar;sc %libc_krenel_preempt%; jmp;
	libc_krenel_tried_interrupt:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~KRENEL INTERRUPT PASSTHROUGHS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		user_geta; lb '\n'; cmp; sc %libc_krenel_syscall_flush_stdout%; jmpifeq;
		user_geta; lb '\r'; cmp;  sc %libc_krenel_syscall_flush_stdout%; jmpifeq;
		user_geta; lb 0xc; cmp; sc %libc_krenel_syscall_clear_term%; jmpifeq;
		user_geta; lb 1; cmp; sc %libc_krenel_syscall_pumpevents%; jmpifeq;
		user_geta; lb 0x80; cmp;  sc %libc_krenel_try_select_task%; jmpifeq; //Interrupt 0x80 just selects the next task.
		//BAD INTERRUPT
		la '\r'; putchar; la '\n'; putchar;
		libc_lproc_krenel_print_krenel;
		la 'i'; putchar;
		la 'l'; putchar;
		la 'l'; putchar;
		la '\ '; putchar;
		la 'i'; putchar;
		la 'n'; putchar;
		la 't'; putchar;
		la '\r'; putchar;
		la '\n'; putchar;interrupt;
		sc %libc_krenel_cswitch_killtask%; jmp;
	libc_krenel_preempt:
		//Check for need of a task switch.
		llda %libc_krenel_task_nreturns%;
		aincr;
		stla  %libc_krenel_task_nreturns%;
		llb %libc_krenel_max_returns%; cmp; lb 2; cmp; sc %libc_krenel_try_select_task%; jmpifeq;
		//We already configured the segment. We just preempted a running task, which we should return to.
		//push %10%; libc_lproc_krenel_configure_segment; pop %10%;
		
		priv_drop;
		sc %libc_krenel_cswitch_looptop%; jmp;
	libc_krenel_cswitch_killtask:
		//Kill the current task.
			task_kill;
		//Set active task to be in the "dead" state- 0.
			llda %libc_krenel_active_task_index%;
			lb libc_krenel_max_active_tasks_mask; and;
			lb 2;mul;ba;
			sc %LIBC_REGION%;
			lla %libc_krenel_task_isactive_array%;
			add;ba;
			la 0; faristla;
		//Does this dead task own the segment? If not, then, don't unlock it.
			llda %libc_krenel_active_task_index%;
			lldb %libc_krenel_owns_segment_index%;
			cmp; 
			sc %libc_krenel_try_select_task%; 
			jmpifneq;
		//It owns the segment. Unlock it.
			la 0; stla  %libc_krenel_segment_lock%;
	libc_krenel_try_select_task:
		task_ric; //Reset the current task's instruction counter.
		la 1; interrupt; //Check for quit signal. Also pumps the keyboard...
		llb %0xffFF%; cmp; sc %libc_krenel_shutdown%; jmpifeq; //quit if we should!
		lb 0; rx2b;	//RX2: the number of things we have tried.
		la 0; stla  %libc_krenel_task_nreturns%;	//Reset the number of returns for our old task.
		lb libc_krenel_max_active_tasks_mask; rx1b;
		llda %libc_krenel_active_task_index%;
		rx3a;//RX3: our counter.
	libc_krenel_try_select_task_loop:
		//Loop from where we are, and around again. If we find a task to execute... execute it!
			rx0_3;
			rxincr;
			rxand; //we're using the mask.
			rx3_0;
			arx3;lb 1;lsh;ba;
			//sc %LIBC_REGION%;
			lla %libc_krenel_task_isactive_array%;
			add;ba;
			illdab;
		//Did we find it? 1 is already the value for "equals" so we dont need to compare it.
			sc %libc_krenel_found_pid_to_run%; jmpifeq;
		//We didn't! Should we quit?
			rx0_2;rxincr;rx2_0;
		//It will always be at LEAST 1 after this... We have to compare with the *mask* which is one less.
			rxdecr;
			rxcmp;lb 2;cmp;sc %libc_krenel_shutdown%; jmpifeq;
		//No. Continue to search for new tasks.
			sc %libc_krenel_try_select_task_loop%; jmp;
	libc_krenel_found_pid_to_run:
		//Set it as the active PID.
		arx3;
		task_set; 
		task_ric;
		stla  %libc_krenel_active_task_index%
		libc_lproc_krenel_configure_segment;
		priv_drop;
		//We have a return argument to respond to!
		sc %libc_krenel_cswitch_looptop%; jmp;
	libc_krenel_shutdown:
		//Shut down the system.
		//Loop through all the stuff. Close everything!
		//Set all tasks to be zero. task_kill everything.
		lb 0;rx0b; 
		lb libc_krenel_max_active_tasks; rx1b;
		libc_krenel_zero_tasks_shutdown_looptop:
			arx0;task_kill;
			lb 2;mul;ba;
			sc %LIBC_REGION%;lla %libc_krenel_task_isactive_array%
			add;ba;
			la 0; faristla;
			rxincr;rxcmp;nota; //nota is just "Is a equal to zero?"
			sc %libc_krenel_zero_tasks_shutdown_looptop%; jmpifeq;
		lla %0xE001%; interrupt; //make IO blocking again.
		libc_lproc_krenel_print_krenel;
		la 's'; putchar;
		la 'h'; putchar;
		la 'u'; putchar;
		la 't'; putchar;
		la 'd'; putchar;
		la 'o'; putchar;
		la 'w'; putchar;
		la 'n'; putchar;
		la '\n'; interrupt;
		farret;//asm_print; //I want information!


//If you directly boot the libc, this is what you boot into.

:libc_booter:
	//restore the nops at zero. We are in the zero region, so we don't actually have to do any far memory indexing.
	la 0x1E;
	sta %0%;
	sta %1%;
	sta %2%;
	sta %3%;
	la 0; rx0a;
	lla %0x100%; rx1a;
	llb %~LIBC_REGION%, 0;
	libc_booter_copy_loop:
		arx0;  add; ca;
		arx0;
		farpagest;
		rxincr;
		rxcmp;
		nota;
		sc %libc_booter_copy_loop%; jmpifeq;
	//Indicate that booting succeded.
	astp;popa; //Clear the stack pointer.

	//NOTE TO USER: REPLACE THE FOLLOWING WITH YOUR ENTRY POINT!!!!
	lrx0 %/libc_COMMAND_COM%;		//Launch our shell, command.com
	proc_krenel;					//Krenel is told what to boot into.
	halt;
:LIBC_KRENEL_END:
..export"LIBC_KRENEL_END"
..include"command_com.hasm"

