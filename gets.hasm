


//GETS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Clobbers: A, B, C, RX0, RX1, RX2, RX3
//Designed for interactive mode.
//Limit of 0xffFE characters.
.libc_gets_max_chars:0xffFE

..decl_farproc:proc_gets
	//Grab the far pointer.
	astp; lb 6; sub; ca; ildb;
	rx0b; lb16; rx1b; rxlsh;
	aincr; ca; illdb; 
	rx1b; rxadd;
	//It's in RX0.
	rx3_0;
	lb0;rx2b;
	:libc_gets_looptop:
		rx0_2
		llb %libc_gets_max_chars%; rx1b
		rxcmp
		lb 0;
		cmp;
		sc %libc_gets_loopend%
		jmpifneq
		
		getchar; //Hey, user, give me some data!
		apush;
		lb 0;cmp;bpop;sc%libc_gets_loopend%;jmpifeq;
		ab;bpush;
		lb 0xd;cmp;bpop;sc%libc_gets_loopend%;jmpifeq;
		ab;bpush;
		lb 0xa;cmp;bpop;sc%libc_gets_loopend%;jmpifeq;
		ab;bpush;


		//ascii del chars.
		lb 0x7f;cmp;bpop;sc%libc_gets_handle_del%;jmpifeq;
		ab;bpush;
		lb 8;cmp;bpop;sc%libc_gets_handle_del%;jmpifeq;
		


		//greater than 126?
		ab;bpush;
		lb 126;cmp;lb2;cmp;bpop;sc%libc_gets_loopend%;jmpifeq;

		//If This is what we do if its not a delete character.
		ab;
		rx0_3;		cbrx0;		farista;
		rx0_2;		rxincr;		rx2_0;
		rx0_3;		rxincr;		rx3_0;

		//store a space and a zero at the end of the string.
		cbrx0;		la 0;	farista;
		rx1_2;		rxsub;	
		la 0xd; putchar;
		cbrx0;
		ac;
		apush;blpush;
			proc_puts;
		pop %3%;
		la 0xd; putchar;
	:libc_gets_zero_chars:
		sc %libc_gets_looptop%;jmp;
	//Handle ascii DEL and Backspace.
	:libc_gets_handle_del:
		rx0_2; 		lb0;rx1b;	rxcmp;	sc %libc_gets_zero_chars%; jmpifeq;
		rx0_2;		rxdecr;		rx2_0;
		rx0_3;		rxdecr;		rx3_0;
		la 0xd; putchar;
		//store a space and a zero at the end of the string.
		cbrx0;		la 32;	farista;
		rxincr;		cbrx0;		la 0;	farista;
		rxdecr;
		rx1_2;		
		rxsub;	
		la 0xd; putchar;
		cbrx0;
		ac;
		apush;blpush;
			proc_puts;
		pop %3%;
		la 32; putchar;
		la 32; putchar;
		la 32; putchar;
		la 0xd; putchar;
		sc %libc_gets_looptop%;jmp;
	//ending: we must write a zero out. This actually overwrites the last character... See, we don't actually want it.
	:libc_gets_loopend:
		rx0_3;
		cbrx0; 
		la 0; 
		farista; 
farret;



//GETS_NOECHO
//Clobbers: A, B, C, RX0, RX1, RX2, RX3
..decl_farproc:proc_gets_noecho
	//Grab the far pointer.
	astp; lb 6; sub; ca; ildb;
	rx0b; lb16; rx1b; rxlsh;
	aincr; ca; illdb; 
	rx1b; rxadd;
	//It's in RX0.
	rx3_0;
	lb0;rx2b;
	:libc_gets_noecho_looptop:
		rx0_2
		llb %libc_gets_max_chars%; rx1b;
		rxcmp
		lb 0;
		cmp;
		sc %libc_gets_loopend%
		jmpifneq
		
		rx0_3;	cbrx0;
		getchar; //Hey, user, give me some data!
		farista;
		apush;
		lb 0;cmp;bpop;sc%libc_gets_loopend%;jmpifeq;
		ab;bpush;
		lb 0xd;cmp;bpop;sc%libc_gets_loopend%;jmpifeq;
		ab;bpush;
		lb 0xa;cmp;bpop;sc%libc_gets_loopend%;jmpifeq;
		ab;
		lb 126;cmp;lb2;cmp;sc%libc_gets_loopend%;jmpifeq;
		rx0_3;		rxincr;		rx3_0;
		rx0_2;		rxincr;		rx2_0;
	sc %libc_gets_noecho_looptop%;jmp;
	//We can actually share the same endings as gets, so we don't have anything here...
