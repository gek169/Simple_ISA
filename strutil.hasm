

//STRDUPE
//Receives a string to duplicate in RX0.

:libc_strdupe_retval_store:
bytes %/0%;

..decl_farproc(LIBC_REGION):proc_strdupe
..export"proc_strdupe"
	rx0push;
	rx0push;
	proc_strlen;
	rx0pop; rxincr; rx0push; //We also need a null terminator...
	//fetch us some memory!
	proc_alloc;
	//If alloc failed, we simply abort()
	lb 0; rx1b; rxcmp; sc %libc_strdupe_abort%; jmpifeq;
	farstrx0 %&libc_strdupe_retval_store%;
	rx2pop;		//The number of bytes.
	rx1pop;		//the source to copy from.
	proc_memcpy;
	farldrx0 %&libc_strdupe_retval_store%;
	farret
	:libc_strdupe_abort:
	lb 0; div;
	halt;


//RX0: the number
//RX1: the destination.
..decl_farproc(LIBC_REGION):proc_utoa_dec
..export"proc_utoa_dec"
	rx2_0;
	rx3_1;

	//Billions digit.
	lrx1 %/1000000000%; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;
	//Hundred Millions Digit.
	rx0_2;
	lrx1 %/100000000%; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;
	//Ten Millions Digit.
	rx0_2;
	lrx1 %/10000000%; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;
	//Millions Digit.
	rx0_2;
	lrx1 %/1000000%; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;	
	//Hundred Thousands
	rx0_2;
	lrx1 %/100000%; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;	
	//Ten Thousands
	rx0_2;
	llb %10000%;rx1b; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;
	//Thousands
	rx0_2;
	llb %1000%;rx1b; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;
	//Hundreds
	rx0_2;
	lb 100;rx1b; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;
	//Tens
	rx0_2;
	lb 10;rx1b; rxdiv;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
		rxincr; 
	rx3_0;
	//Ones.
	rx0_2;
	arx0; lb 10; mod; lb 0x30; add;
	rx0_3;
		cbrx0;
		farista;
	rxincr; cbrx0;la 0; farista;
	farret

//RX0: the number
//RX1: the destination.

..decl_farproc(LIBC_REGION):proc_itoa_dec
..export"proc_itoa_dec"
	rx2_0;
	rx3_1;
	lb 31; rx1b; rxrsh; arx0; nota; sc %libc_itoa_dec_noneg%; jmpifeq;
	rx0_3;cbrx0; 
	la '-'; farista; //it is a negative number. Put a negative sign in front!
	rxincr; rx3_0;
	rx0_2; rxcompl; rxincr; rx2_0;
	:libc_itoa_dec_noneg:
		rx0_2;
		rx1_3;
		proc_utoa_dec
	farret
