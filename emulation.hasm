

//EMULATION STATION~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//This must be placed at a region boundary, so it must be first.
//Both of the following functions take a jump point in RX0.
//They take a page to share with the client in the second parameter, so memory can be shared.
//Register A (upon return) is the return value from the containerized machine, so you can use the error code if there was one.

//Copy sh*t.
farldrx0 %~LIBC_REGION%, %libc_emulate_stack_data_store%
farstrx0 %&0%
.libc_emulate_jumploc:@+1+
lrx0 %/0%; 
farjmprx0;
:libc_emulate_stack_data_store:
nop;nop;nop;nop;

//Both of these functions use register B to store the page that 

..decl_farproc(LIBC_REGION):proc_emulate
..export"proc_emulate"
	//We are passed a place to jump to in RX0.
	farstrx0 %~LIBC_REGION%, %libc_emulate_jumploc%;
	//We must memcpy three bytes, so we memcpy 4.
	farldrx0 %&0%
	farstrx0 %~LIBC_REGION%, %libc_emulate_stack_data_store%
	sc %0%; la 2; ista; //la
	adecr;ca;			//put 1 into c.
	lla %~LIBC_REGION%, 0x44; istla;
	ab;
	emulate;
	//restore stack integrity.
		farldrx0 %~LIBC_REGION%, %libc_emulate_stack_data_store%
		farstrx0 %&0%
	//a holds the value. CHECK IT.
	bpush;
	libc_emulate_cswitch_looptop:
		lb 0xFF;cmp;
		sc %libc_emulate_cswitch_loopout%; jmpifneq;
		la 'a'; putchar;
		la 'a'; putchar;
		la 'a'; putchar;
		la 'a'; putchar;
		apop;apush;
		priv_drop;
		sc %libc_emulate_cswitch_looptop%; jmp;
	libc_emulate_cswitch_loopout:
	bpop;
farret;

..decl_farproc(LIBC_REGION):proc_emulate_seg
..export"proc_emulate_seg"
	//We are passed a place to jump to in RX0.
	farstrx0 %~LIBC_REGION%, %libc_emulate_jumploc%;
	//copy four bytes from the bottom of the stack for the bootloader.
	farldrx0 %&0%
	farstrx0 %~LIBC_REGION%, %libc_emulate_stack_data_store%
	sc %0%; la 2; ista; 	//la
	adecr;ca;				//put 1 into c.
	lla %~LIBC_REGION%, 0x44; istla;
	ab;
	emulate_seg;
	//restore stack integrity.
	farldrx0 %~LIBC_REGION%, %libc_emulate_stack_data_store%
	farstrx0 %&0%
	//a holds the value. CHECK IT.
	bpush;
	libc_emulate_seg_cswitch_looptop:
		lb 0xFF;cmp;
		sc %libc_emulate_seg_cswitch_loopout%; jmpifneq;
		apop;apush;
		priv_drop;
		sc %libc_emulate_seg_cswitch_looptop%; jmp;
	libc_emulate_seg_cswitch_loopout:
	bpop;
farret;
